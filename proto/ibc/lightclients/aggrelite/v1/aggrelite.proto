syntax = "proto3";

package ibc.lightclients.aggrelite.v1;

//option go_package = "github.com/T-ragon/ibc-go/v9/modules/light-clients/05-aggrelite;aggrelite";
option go_package = "modules/light-clients/05-aggrelite;_5_aggreLite";

import "tendermint/types/validator.proto";
import "tendermint/types/types.proto";
import "gogoproto/gogo.proto";
import "cosmos/ics23/v1/proofs.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "ibc/core/client/v1/client.proto";
import "ibc/core/commitment/v1/commitment.proto";

// ClientState from Tendermint tracks the current validator set, latest height,
// and a possible frozen height.
message ClientState{
    option (gogoproto.goproto_getters) = false;
    string chain_id = 1;
    Fraction trust_level = 2 [(gogoproto.nullable) = false];
    // duration of the period since the LastestTimestamp during which the
     // submitted headers are valid for upgrade
    google.protobuf.Duration trusting_period = 3 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
    // duration of the staking unbonding period
    google.protobuf.Duration unbonding_period = 4 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
    // defines how much new (untrusted) header's Time can drift into the future.
    google.protobuf.Duration max_clock_drift = 5 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
    ibc.core.client.v1.Height frozen_height = 6 [(gogoproto.nullable) = false];
    ibc.core.client.v1.Height latest_height = 7 [(gogoproto.nullable) = false];

    repeated cosmos.ics23.v1.ProofSpec proof_specs = 8;
    repeated string upgrade_path = 9;
    bool allow_update_after_expiry = 10 [deprecated = true];
    bool allow_update_after_misbehaviour = 11 [deprecated = true];
}

// ConsensusState defines the consensus state from Tendermint.
message ConsensusState {
    option (gogoproto.goproto_getters) = false;

    google.protobuf.Timestamp timestamp = 1 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
    // commitment root (i.e app hash)
    ibc.core.commitment.v1.MerkleRoot root = 2 [(gogoproto.nullable) = false];
    bytes next_validators_hash = 3 [(gogoproto.casttype) = "github.com/cometbft/cometbft/libs/bytes.HexBytes"];
}

// Misbehaviour is a wrapper over two conflicting Headers
// that implements Misbehaviour interface expected by ICS-02
message Misbehaviour {
    option (gogoproto.goproto_getters) = false;

    // ClientID is deprecated
    string client_id = 1 [deprecated = true];
    Header header_1  = 2 [(gogoproto.customname) = "Header1"];
    Header header_2  = 3 [(gogoproto.customname) = "Header2"];
}

// Header defines the Tendermint client consensus Header.
// It encapsulates all the information necessary to update from a trusted
// Tendermint ConsensusState. The inclusion of TrustedHeight and
// TrustedValidators allows this update to process correctly, so long as the
// ConsensusState for the TrustedHeight exists, this removes race conditions
// among relayers The SignedHeader and ValidatorSet are the new untrusted update
// fields for the client. The TrustedHeight is the height of a stored
// ConsensusState on the client that will be used to verify the new untrusted
// header. The Trusted ConsensusState must be within the unbonding period of
// current time in order to correctly verify, and the TrustedValidators must
// hash to TrustedConsensusState.NextValidatorsHash since that is the last
// trusted validator set at the TrustedHeight.
message Header {
    .tendermint.types.SignedHeader signed_header = 1 [(gogoproto.embed) = true];

    .tendermint.types.ValidatorSet validator_set      = 2;
    ibc.core.client.v1.Height      trusted_height     = 3 [(gogoproto.nullable) = false];
    .tendermint.types.ValidatorSet trusted_validators = 4;
}

// Fraction defines the protobuf message type for tmmath.Fraction that only
// supports positive values.
message Fraction {
    uint64 numerator = 1;
    uint64 denominator = 2;
}

message Height {

    // the revision that the client is currently on
    uint64 revision_number = 1;
    // the height within the given revision
    uint64 revision_height = 2;
}

enum HashOp {
    // NO_HASH is the default if no data passed. Note this is an illegal argument some places.
    NO_HASH     = 0;
    SHA256      = 1;
    SHA512      = 2;
    KECCAK256   = 3;
    RIPEMD160   = 4;
    BITCOIN     = 5; // ripemd160(sha256(x))
    SHA512_256  = 6;
    BLAKE2B_512 = 7;
    BLAKE2S_256 = 8;
    BLAKE3      = 9;
}

message Packet {
    // number corresponds to the order of sends and receives, where a Packet
    // with an earlier sequence number must be sent and received before a Packet
    // with a later sequence number.
    uint64 sequence = 1;
    // identifies the port on the sending chain.
    string source_port = 2;
    // identifies the channel end on the sending chain.
    string source_channel = 3;
    // identifies the port on the receiving chain.
    string destination_port = 4;
    // identifies the channel end on the receiving chain.
    string destination_channel = 5;
    // actual opaque bytes transferred directly to the application module
    bytes data = 6;
    // block height after which the packet times out
    Height timeout_height = 7;
    // block timestamp (in nanoseconds) after which the packet times out
    uint64 timeout_timestamp = 8;
}

//InnerOp
message InnerOp{
    HashOp hash = 1;
    bytes prefix = 2;
    bytes suffix = 3;
}

//ProofMeta
message ProofMeta {
    bytes hash_value = 1;
    InnerOp path_inner_op = 2;
}

//SubProof
message SubProof {
    uint32 number = 1;
    repeated ProofMeta proof_meta_list = 2;
}


//AggregatePacket
message AggregatePacket {
    repeated Packet packets = 1;
    repeated uint32 packets_leaf_number = 2; //rust 中 是 uint16
    repeated SubProof proof = 3;
    string signer = 4;
}

