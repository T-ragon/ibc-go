syntax = "proto3";

package ibc.lightclients.aggrelite;

option go_package = "aggrelite";


message Height {

  // the revision that the client is currently on
  uint64 revision_number = 1;
  // the height within the given revision
  uint64 revision_height = 2;
}

enum HashOp {
  // NO_HASH is the default if no data passed. Note this is an illegal argument some places.
  NO_HASH     = 0;
  SHA256      = 1;
  SHA512      = 2;
  KECCAK256   = 3;
  RIPEMD160   = 4;
  BITCOIN     = 5; // ripemd160(sha256(x))
  SHA512_256  = 6;
  BLAKE2B_512 = 7;
  BLAKE2S_256 = 8;
  BLAKE3      = 9;
}

message Packet {
  // number corresponds to the order of sends and receives, where a Packet
  // with an earlier sequence number must be sent and received before a Packet
  // with a later sequence number.
  uint64 sequence = 1;
  // identifies the port on the sending chain.
  string source_port = 2;
  // identifies the channel end on the sending chain.
  string source_channel = 3;
  // identifies the port on the receiving chain.
  string destination_port = 4;
  // identifies the channel end on the receiving chain.
  string destination_channel = 5;
  // actual opaque bytes transferred directly to the application module
  bytes data = 6;
  // block height after which the packet times out
  Height timeout_height = 7;
  // block timestamp (in nanoseconds) after which the packet times out
  uint64 timeout_timestamp = 8;
}

//仍需修改
message InnerOp{
  HashOp hash = 1;
  bytes prefix = 2;
  bytes suffix = 3;
}


message ProofMeta {
  bytes hash_value = 1;
  InnerOp path_inner_op = 2;
}


message SubProof {
  uint32 number = 1;
  repeated ProofMeta proof_meta_list = 2;
}


message AggregatePacket {
  repeated Packet packets = 1;
  repeated uint32 packets_leaf_number = 2; //rust 中 是 uint16
  repeated SubProof proof = 3;
  string signer = 4;
}

